#!groovy?
def createPullRequest(url, text) {
  def payload = JsonOutput.toJson(text) 
    sh "curl -n -X POST -H 'Content-Type: application/json' --data ${payload} ${url}"
}

pipeline {

  agent {label 'slave'}
  environment{
    GIT_REPO='github.com/ironSource/ci-cd-from-scratch-webserver.git'
  }
  stages {
    stage ('PREBUILD') {

      steps {
        step([$class: 'WsCleanup'])
      }
    }
    stage ('CHECKOUT') {
      steps {
        git branch: '**', credentialsId: 'b86dc47c-c339-4b03-9aaf-0be24704ef6b', url: "https://${env.GIT_REPO}"
      }
    }
    stage ('SET ENVIRONMENT VARIABLES') {
      steps {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'b86dc47c-c339-4b03-9aaf-0be24704ef6b', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
          sh '''
            set +e
            set +x
            echo env.GIT_USERNAME=${GIT_USERNAME} > env.properties
            echo env.GIT_PASSWORD=${GIT_PASSWORD} >> env.properties
            echo env.GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) >> env.properties
            echo env.ORIGINAL_BRANCH=$(git rev-parse --abbrev-ref HEAD) >> env.properties
            echo env.GIT_COMMIT=$(git rev-parse HEAD) >> env.properties
            cat env.properties
          '''
        }

        sh '''
          sed 's/$/"/g' -i env.properties
          sed 's/=/="/g' -i env.properties
        '''

        sh 'cat infra/jenkins-env-variables.groovy >> env.properties'

        load ('env.properties')
      }
    }

    stage ('VALIDATE BRANCH') {
      when {
        expression {
          return !(env.GIT_BRANCH =~ /^(feature|test|bug|staging|master)/)
        }
      }
      steps {
        echo env.GIT_BRANCH 
        echo 'branch is not supported'
        sh 'exit 1'
      }
    }
    stage ('MERGE TO STAGING') {
      when {
        expression {return env.GIT_BRANCH =~ /^(feature|test|bug)/}
      }
      steps {
        sh '''
          git config user.name 'ci.infra'
          git config user.email 'ci.infra@ironsource.com'
          git checkout staging
          git merge ${GIT_BRANCH}
          echo env.GIT_COMMIT=$(git rev-parse HEAD) > merge.properties
          echo env.GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) >> merge.properties
          sed 's/$/"/g' -i merge.properties
          sed 's/=/="/g' -i merge.properties
        '''
        load ('merge.properties')
      }
    }

    stage ('BUILDING IMAGE') {
      steps {
        ansiblePlaybook(
          extras: '-c local -v',
          playbook: 'infra/build-playbook.yml',
          extraVars: [
            commit: env.GIT_COMMIT,
            image: env.DOCKER_REPO,
            branch: env.GIT_BRANCH
          ])
      }
    }
    stage ('RUN UNIT TESTS') {
      steps {
        ansiblePlaybook(
          extras: '-c local -v',
          playbook: 'infra/unit-test-playbook.yml',
          extraVars: [
            commit: env.GIT_COMMIT,
            image: env.DOCKER_REPO,
            name: env.COMPONENT
          ])
      }
    }
    stage ('PUSH IMAGE TO REGISTRY') {
      steps {
        ansiblePlaybook(
          extras: '-c local -v',
          playbook: 'infra/push-to-docker-hub-playbook.yml',
          extraVars: [
            commit: env.GIT_COMMIT,
            image: env.DOCKER_REPO,
            branch: env.GIT_BRANCH
        ])
      }
    }

    stage ('PUSH TO REMOTE STAGING BRANCH') {
      when {
        expression {return env.ORIGINAL_BRANCH=~ /^(feature|test|bug)/}
      }
      steps {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'b86dc47c-c339-4b03-9aaf-0be24704ef6b', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
          sh '''
            git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_REPO}
          '''
        }
      }
    }

    stage ('DEPLOY') {
      steps {
        ansiblePlaybook(
          playbook: 'infra/deploy-playbook.yml',
          inventory: 'infra/inventory.ini',
          extras: '-v',
          extraVars: [
            commit: env.GIT_COMMIT,
            image:  env.DOCKER_REPO,
            service: env.COMPONENT,
            environment: env.GIT_BRANCH,
            branch: env.GIT_BRANCH])
      }
    }

  }
}

